{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55],"program":"/home/fish/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","csv","/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=f8de9813c55be3c5","-C","extra-filename=-f8de9813c55be3c5","--out-dir","/home/fish/cstuff/reverse_rs/target/rls/debug/deps","-L","dependency=/home/fish/cstuff/reverse_rs/target/rls/debug/deps","--extern","csv_core=/home/fish/cstuff/reverse_rs/target/rls/debug/deps/libcsv_core-151f6fcde9ab9ac0.rmeta","--extern","itoa=/home/fish/cstuff/reverse_rs/target/rls/debug/deps/libitoa-868b47501f39ec5a.rmeta","--extern","ryu=/home/fish/cstuff/reverse_rs/target/rls/debug/deps/libryu-1213b04641252101.rmeta","--extern","serde=/home/fish/cstuff/reverse_rs/target/rls/debug/deps/libserde-a995ae4cc8550658.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/fish/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,102,105,115,104,47,99,115,116,117,102,102,47,114,101,118,101,114,115,101,95,114,115,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,99,115,118,45,102,56,100,101,57,56,49,51,99,53,53,98,101,51,99,53,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"csv","disambiguator":[8774682878625043893,10364257930940600374]},"crate_root":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src","external_crates":[{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[13207157035321610514,1601512537482633728]}},{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7623312343418098386,5842227285171027081]}},{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15062483144693841030,3160817630090790886]}},{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[436745421963593417,1808485874600938246]}},{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14785001670989826495,12996925471203689162]}},{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9965434524793337566,8042345761937100773]}},{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[15482981957725683232,16126164733460801089]}},{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[12401856028840807657,14789254441426287527]}},{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[13858858106744831426,15797026455235720829]}},{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[7931781289263694084,224457116430056702]}},{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":11,"id":{"name":"csv_core","disambiguator":[11231312066763423233,15896790636149722993]}},{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":12,"id":{"name":"memchr","disambiguator":[5390843278020507458,2013075892868062689]}},{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":13,"id":{"name":"libc","disambiguator":[5264587781840985964,11014764158667791597]}},{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":14,"id":{"name":"itoa","disambiguator":[12007538452035956989,15804599189919697299]}},{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":15,"id":{"name":"ryu","disambiguator":[7140575970872352423,12610807478909003746]}},{"file_name":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","num":16,"id":{"name":"serde","disambiguator":[4123913605178990712,2548663000725449637]}}],"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":10792,"line_start":1,"line_end":389,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1600},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4162,"byte_end":4172,"line_start":185,"line_end":185,"column_start":23,"column_end":33},"alias_span":null,"name":"ByteRecord","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":250},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4174,"byte_end":4188,"line_start":185,"line_end":185,"column_start":35,"column_end":49},"alias_span":null,"name":"ByteRecordIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1630},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4190,"byte_end":4198,"line_start":185,"line_end":185,"column_start":51,"column_end":59},"alias_span":null,"name":"Position","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1686},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4224,"byte_end":4240,"line_start":186,"line_end":186,"column_start":24,"column_end":40},"alias_span":null,"name":"DeserializeError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1706},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4242,"byte_end":4262,"line_start":186,"line_end":186,"column_start":42,"column_end":62},"alias_span":null,"name":"DeserializeErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1726},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4286,"byte_end":4291,"line_start":188,"line_end":188,"column_start":5,"column_end":10},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1732},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4293,"byte_end":4302,"line_start":188,"line_end":188,"column_start":12,"column_end":21},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1738},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4304,"byte_end":4317,"line_start":188,"line_end":188,"column_start":23,"column_end":36},"alias_span":null,"name":"FromUtf8Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":628},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4319,"byte_end":4333,"line_start":188,"line_end":188,"column_start":38,"column_end":52},"alias_span":null,"name":"IntoInnerError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":566},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4335,"byte_end":4341,"line_start":188,"line_end":188,"column_start":54,"column_end":60},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1758},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4343,"byte_end":4352,"line_start":188,"line_end":188,"column_start":62,"column_end":71},"alias_span":null,"name":"Utf8Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1784},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4379,"byte_end":4385,"line_start":191,"line_end":191,"column_start":5,"column_end":11},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1778},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4387,"byte_end":4400,"line_start":191,"line_end":191,"column_start":13,"column_end":26},"alias_span":null,"name":"ReaderBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":810},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4406,"byte_end":4432,"line_start":192,"line_end":192,"column_start":5,"column_end":31},"alias_span":null,"name":"DeserializeRecordsIntoIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":828},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4434,"byte_end":4456,"line_start":192,"line_end":192,"column_start":33,"column_end":55},"alias_span":null,"name":"DeserializeRecordsIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":844},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4462,"byte_end":4483,"line_start":193,"line_end":193,"column_start":5,"column_end":26},"alias_span":null,"name":"StringRecordsIntoIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":862},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4485,"byte_end":4502,"line_start":193,"line_end":193,"column_start":28,"column_end":45},"alias_span":null,"name":"StringRecordsIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":878},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4508,"byte_end":4527,"line_start":194,"line_end":194,"column_start":5,"column_end":24},"alias_span":null,"name":"ByteRecordsIntoIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":896},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4529,"byte_end":4544,"line_start":194,"line_end":194,"column_start":26,"column_end":41},"alias_span":null,"name":"ByteRecordsIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1802},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4573,"byte_end":4585,"line_start":196,"line_end":196,"column_start":25,"column_end":37},"alias_span":null,"name":"StringRecord","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1430},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4587,"byte_end":4603,"line_start":196,"line_end":196,"column_start":39,"column_end":55},"alias_span":null,"name":"StringRecordIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1818},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4623,"byte_end":4629,"line_start":197,"line_end":197,"column_start":18,"column_end":24},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1812},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4631,"byte_end":4644,"line_start":197,"line_end":197,"column_start":26,"column_end":39},"alias_span":null,"name":"WriterBuilder","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":10792,"line_start":1,"line_end":389,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":22},{"krate":0,"index":30},{"krate":0,"index":36},{"krate":0,"index":50},{"krate":0,"index":68},{"krate":0,"index":74},{"krate":0,"index":80},{"krate":0,"index":276},{"krate":0,"index":544},{"krate":0,"index":652},{"krate":0,"index":654},{"krate":0,"index":912},{"krate":0,"index":1284},{"krate":0,"index":1446},{"krate":0,"index":1448},{"krate":0,"index":1842},{"krate":0,"index":1850},{"krate":0,"index":1848},{"krate":0,"index":1844},{"krate":0,"index":1572},{"krate":0,"index":1576},{"krate":0,"index":1854},{"krate":0,"index":1862},{"krate":0,"index":1860},{"krate":0,"index":1856},{"krate":0,"index":1580},{"krate":0,"index":1584},{"krate":0,"index":1866},{"krate":0,"index":1878},{"krate":0,"index":1876},{"krate":0,"index":1872},{"krate":0,"index":1868},{"krate":0,"index":1588},{"krate":0,"index":1594},{"krate":0,"index":1598}],"decl_id":null,"docs":"The `csv` crate provides a fast and flexible CSV reader and writer, with\nsupport for Serde.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3884,"byte_end":3906,"line_start":169,"line_end":169,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1600},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":14513,"byte_end":14523,"line_start":108,"line_end":108,"column_start":12,"column_end":22},"name":"ByteRecord","qualname":"::byte_record::ByteRecord","value":"","parent":null,"children":[],"decl_id":null,"docs":" A single CSV record stored as raw bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":17121,"byte_end":17124,"line_start":204,"line_end":204,"column_start":12,"column_end":15},"name":"new","qualname":"<ByteRecord>::new","value":"fn () -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `ByteRecord`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":17100,"byte_end":17109,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":17473,"byte_end":17486,"line_start":214,"line_end":214,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<ByteRecord>::with_capacity","value":"fn (buffer: usize, fields: usize) -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `ByteRecord` with the given capacity settings.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":17452,"byte_end":17461,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":20769,"byte_end":20780,"line_start":311,"line_end":311,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<ByteRecord>::deserialize","value":"fn <'de, D> (&'de self, headers: Option<&'de ByteRecord>) -> Result<D>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize this record.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":21386,"byte_end":21390,"line_start":333,"line_end":333,"column_start":12,"column_end":16},"name":"iter","qualname":"<ByteRecord>::iter","value":"fn (&self) -> ByteRecordIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all fields in this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":21365,"byte_end":21374,"line_start":332,"line_end":332,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":21837,"byte_end":21840,"line_start":351,"line_end":351,"column_start":12,"column_end":15},"name":"get","qualname":"<ByteRecord>::get","value":"fn (&self, i: usize) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the field at index `i`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":21816,"byte_end":21825,"line_start":350,"line_end":350,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":22173,"byte_end":22181,"line_start":365,"line_end":365,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<ByteRecord>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this record is empty.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":22152,"byte_end":22161,"line_start":364,"line_end":364,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":22500,"byte_end":22503,"line_start":380,"line_end":380,"column_start":12,"column_end":15},"name":"len","qualname":"<ByteRecord>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of fields in this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":22479,"byte_end":22488,"line_start":379,"line_end":379,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":23035,"byte_end":23043,"line_start":401,"line_end":401,"column_start":12,"column_end":20},"name":"truncate","qualname":"<ByteRecord>::truncate","value":"fn (&mut self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Truncate this record to `n` fields.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":23014,"byte_end":23023,"line_start":400,"line_end":400,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":23652,"byte_end":23657,"line_start":425,"line_end":425,"column_start":12,"column_end":17},"name":"clear","qualname":"<ByteRecord>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear this record so that it has zero fields.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":23631,"byte_end":23640,"line_start":424,"line_end":424,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":24237,"byte_end":24241,"line_start":446,"line_end":446,"column_start":12,"column_end":16},"name":"trim","qualname":"<ByteRecord>::trim","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Trim the fields of this record so that leading and trailing whitespace\n is removed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":25778,"byte_end":25788,"line_start":494,"line_end":494,"column_start":12,"column_end":22},"name":"push_field","qualname":"<ByteRecord>::push_field","value":"fn (&mut self, field: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a new field to this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":25757,"byte_end":25766,"line_start":493,"line_end":493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":27352,"byte_end":27360,"line_start":542,"line_end":542,"column_start":12,"column_end":20},"name":"position","qualname":"<ByteRecord>::position","value":"fn (&self) -> Option<&Position>","parent":null,"children":[],"decl_id":null,"docs":" Return the position of this record, if available.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":27331,"byte_end":27340,"line_start":541,"line_end":541,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":27888,"byte_end":27900,"line_start":563,"line_end":563,"column_start":12,"column_end":24},"name":"set_position","qualname":"<ByteRecord>::set_position","value":"fn (&mut self, pos: Option<Position>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the position of this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":27867,"byte_end":27876,"line_start":562,"line_end":562,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":28513,"byte_end":28518,"line_start":583,"line_end":583,"column_start":12,"column_end":17},"name":"range","qualname":"<ByteRecord>::range","value":"fn (&self, i: usize) -> Option<Range<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return the start and end position of a field in this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":28492,"byte_end":28501,"line_start":582,"line_end":582,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29032,"byte_end":29040,"line_start":600,"line_end":600,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<ByteRecord>::as_slice","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return the entire row as a single byte slice. The slice returned stores\n all fields contiguously. The boundaries of each field can be determined\n via the `range` method.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29011,"byte_end":29020,"line_start":599,"line_end":599,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1630},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29507,"byte_end":29515,"line_start":614,"line_end":614,"column_start":12,"column_end":20},"name":"Position","qualname":"::byte_record::Position","value":"Position {  }","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":691},{"krate":0,"index":693}],"decl_id":null,"docs":" A position in CSV data.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29496,"byte_end":29566,"line_start":614,"line_end":618,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29672,"byte_end":29675,"line_start":623,"line_end":623,"column_start":12,"column_end":15},"name":"new","qualname":"<Position>::new","value":"fn () -> Position","parent":null,"children":[],"decl_id":null,"docs":" Returns a new position initialized to the start value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29651,"byte_end":29660,"line_start":622,"line_end":622,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29829,"byte_end":29833,"line_start":628,"line_end":628,"column_start":22,"column_end":26},"name":"byte","qualname":"<Position>::byte","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The byte offset, starting at `0`, of this position.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29812,"byte_end":29821,"line_start":628,"line_end":628,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29943,"byte_end":29947,"line_start":630,"line_end":630,"column_start":22,"column_end":26},"name":"line","qualname":"<Position>::line","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The line number, starting at `1`, of this position.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29926,"byte_end":29935,"line_start":630,"line_end":630,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":30062,"byte_end":30068,"line_start":632,"line_end":632,"column_start":22,"column_end":28},"name":"record","qualname":"<Position>::record","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The record index, starting with the first record at `0`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":30045,"byte_end":30054,"line_start":632,"line_end":632,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":30171,"byte_end":30179,"line_start":636,"line_end":636,"column_start":12,"column_end":20},"name":"set_byte","qualname":"<Position>::set_byte","value":"fn (&mut self, byte: u64) -> &mut Position","parent":null,"children":[],"decl_id":null,"docs":" Set the byte offset of this position.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":30150,"byte_end":30159,"line_start":635,"line_end":635,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":30416,"byte_end":30424,"line_start":645,"line_end":645,"column_start":12,"column_end":20},"name":"set_line","qualname":"<Position>::set_line","value":"fn (&mut self, line: u64) -> &mut Position","parent":null,"children":[],"decl_id":null,"docs":" Set the line number of this position.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":30395,"byte_end":30404,"line_start":644,"line_end":644,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":30611,"byte_end":30621,"line_start":653,"line_end":653,"column_start":12,"column_end":22},"name":"set_record","qualname":"<Position>::set_record","value":"fn (&mut self, record: u64) -> &mut Position","parent":null,"children":[],"decl_id":null,"docs":" Set the record index of this position.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":30590,"byte_end":30599,"line_start":652,"line_end":652,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":250},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":34186,"byte_end":34200,"line_start":789,"line_end":789,"column_start":12,"column_end":26},"name":"ByteRecordIter","qualname":"::byte_record::ByteRecordIter","value":"ByteRecordIter {  }","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":77}],"decl_id":null,"docs":" A double-ended iterator over the fields in a byte record.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":47466,"byte_end":47477,"line_start":72,"line_end":72,"column_start":8,"column_end":19},"name":"has_headers","qualname":"::deserializer::DeRecord::has_headers","value":"fn (&self) -> bool","parent":{"krate":0,"index":342},"children":[],"decl_id":null,"docs":" Returns true if and only if this deserialize has access to headers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":47576,"byte_end":47587,"line_start":75,"line_end":75,"column_start":8,"column_end":19},"name":"next_header","qualname":"::deserializer::DeRecord::next_header","value":"fn (&mut self) -> Result<Option<&'r str>, DeserializeError>","parent":{"krate":0,"index":342},"children":[],"decl_id":null,"docs":" Extracts the next string header value from the underlying record.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":47729,"byte_end":47746,"line_start":78,"line_end":78,"column_start":8,"column_end":25},"name":"next_header_bytes","qualname":"::deserializer::DeRecord::next_header_bytes","value":"fn (&mut self) -> Result<Option<&'r [u8]>, DeserializeError>","parent":{"krate":0,"index":342},"children":[],"decl_id":null,"docs":" Extracts the next raw byte header value from the underlying record.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":47895,"byte_end":47905,"line_start":83,"line_end":83,"column_start":8,"column_end":18},"name":"next_field","qualname":"::deserializer::DeRecord::next_field","value":"fn (&mut self) -> Result<&'r str, DeserializeError>","parent":{"krate":0,"index":342},"children":[],"decl_id":null,"docs":" Extracts the next string field from the underlying record.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":48032,"byte_end":48048,"line_start":86,"line_end":86,"column_start":8,"column_end":24},"name":"next_field_bytes","qualname":"::deserializer::DeRecord::next_field_bytes","value":"fn (&mut self) -> Result<&'r [u8], DeserializeError>","parent":{"krate":0,"index":342},"children":[],"decl_id":null,"docs":" Extracts the next raw byte field from the underlying record.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":48167,"byte_end":48177,"line_start":89,"line_end":89,"column_start":8,"column_end":18},"name":"peek_field","qualname":"::deserializer::DeRecord::peek_field","value":"fn (&mut self) -> Option<&'r [u8]>","parent":{"krate":0,"index":342},"children":[],"decl_id":null,"docs":" Peeks at the next field from the underlying record.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":48295,"byte_end":48300,"line_start":92,"line_end":92,"column_start":8,"column_end":13},"name":"error","qualname":"::deserializer::DeRecord::error","value":"fn (&self, kind: DeserializeErrorKind) -> DeserializeError","parent":{"krate":0,"index":342},"children":[],"decl_id":null,"docs":" Returns an error corresponding to the most recently extracted field.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":48426,"byte_end":48443,"line_start":95,"line_end":95,"column_start":8,"column_end":25},"name":"infer_deserialize","qualname":"::deserializer::DeRecord::infer_deserialize","value":"fn <'de, V> (&mut self, visitor: V) -> Result<V::Value, DeserializeError>","parent":{"krate":0,"index":342},"children":[],"decl_id":null,"docs":" Infer the type of the next field and deserialize it.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1686},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63038,"byte_end":63054,"line_start":633,"line_end":633,"column_start":12,"column_end":28},"name":"DeserializeError","qualname":"::deserializer::DeserializeError","value":"DeserializeError {  }","parent":null,"children":[{"krate":0,"index":731},{"krate":0,"index":733}],"decl_id":null,"docs":" An Serde deserialization error.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63027,"byte_end":63114,"line_start":633,"line_end":636,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":735},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63285,"byte_end":63292,"line_start":642,"line_end":642,"column_start":5,"column_end":12},"name":"Message","qualname":"::deserializer::DeserializeErrorKind::Message","value":"DeserializeErrorKind::Message(String)","parent":{"krate":0,"index":1706},"children":[],"decl_id":null,"docs":" A generic Serde deserialization error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":739},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63349,"byte_end":63360,"line_start":644,"line_end":644,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::deserializer::DeserializeErrorKind::Unsupported","value":"DeserializeErrorKind::Unsupported(String)","parent":{"krate":0,"index":1706},"children":[],"decl_id":null,"docs":" A generic Serde unsupported error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":743},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63495,"byte_end":63513,"line_start":647,"line_end":647,"column_start":5,"column_end":23},"name":"UnexpectedEndOfRow","qualname":"::deserializer::DeserializeErrorKind::UnexpectedEndOfRow","value":"DeserializeErrorKind::UnexpectedEndOfRow","parent":{"krate":0,"index":1706},"children":[],"decl_id":null,"docs":" This error occurs when a Rust type expects to decode another field\n from a row, but no more fields exist.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":745},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63702,"byte_end":63713,"line_start":651,"line_end":651,"column_start":5,"column_end":16},"name":"InvalidUtf8","qualname":"::deserializer::DeserializeErrorKind::InvalidUtf8","value":"DeserializeErrorKind::InvalidUtf8(str::Utf8Error)","parent":{"krate":0,"index":1706},"children":[],"decl_id":null,"docs":" This error occurs when UTF-8 validation on a field fails. UTF-8\n validation is only performed when the Rust type requires it (e.g.,\n a `String` or `&str` type).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":749},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63798,"byte_end":63807,"line_start":653,"line_end":653,"column_start":5,"column_end":14},"name":"ParseBool","qualname":"::deserializer::DeserializeErrorKind::ParseBool","value":"DeserializeErrorKind::ParseBool(str::ParseBoolError)","parent":{"krate":0,"index":1706},"children":[],"decl_id":null,"docs":" This error occurs when a boolean value fails to parse.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":753},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63898,"byte_end":63906,"line_start":655,"line_end":655,"column_start":5,"column_end":13},"name":"ParseInt","qualname":"::deserializer::DeserializeErrorKind::ParseInt","value":"DeserializeErrorKind::ParseInt(num::ParseIntError)","parent":{"krate":0,"index":1706},"children":[],"decl_id":null,"docs":" This error occurs when an integer value fails to parse.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":757},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63993,"byte_end":64003,"line_start":657,"line_end":657,"column_start":5,"column_end":15},"name":"ParseFloat","qualname":"::deserializer::DeserializeErrorKind::ParseFloat","value":"DeserializeErrorKind::ParseFloat(num::ParseFloatError)","parent":{"krate":0,"index":1706},"children":[],"decl_id":null,"docs":" This error occurs when a float value fails to parse.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1706},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63211,"byte_end":63231,"line_start":640,"line_end":640,"column_start":10,"column_end":30},"name":"DeserializeErrorKind","qualname":"::deserializer::DeserializeErrorKind","value":"DeserializeErrorKind::{Message, Unsupported, UnexpectedEndOfRow, InvalidUtf8, ParseBool, ParseInt, ParseFloat}","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":739},{"krate":0,"index":743},{"krate":0,"index":745},{"krate":0,"index":749},{"krate":0,"index":753},{"krate":0,"index":757}],"decl_id":null,"docs":" The type of a Serde deserialization error.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63202,"byte_end":64028,"line_start":640,"line_end":658,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":65374,"byte_end":65379,"line_start":705,"line_end":705,"column_start":12,"column_end":17},"name":"field","qualname":"<DeserializeError>::field","value":"fn (&self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Return the field index (starting at 0) of this error, if available.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":65483,"byte_end":65487,"line_start":710,"line_end":710,"column_start":12,"column_end":16},"name":"kind","qualname":"<DeserializeError>::kind","value":"fn (&self) -> &DeserializeErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying error kind.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":566},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":78809,"byte_end":78815,"line_start":17,"line_end":17,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `Result<T, csv::Error>`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1726},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":79256,"byte_end":79261,"line_start":28,"line_end":28,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error that can occur when processing CSV data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":79352,"byte_end":79356,"line_start":32,"line_end":32,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"fn (&self) -> &ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the specific type of this error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":79466,"byte_end":79475,"line_start":37,"line_end":37,"column_start":12,"column_end":21},"name":"into_kind","qualname":"<Error>::into_kind","value":"fn (self) -> ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Unwrap this error into its underlying type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":79682,"byte_end":79693,"line_start":45,"line_end":45,"column_start":12,"column_end":23},"name":"is_io_error","qualname":"<Error>::is_io_error","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this is an I/O error.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":765},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":79952,"byte_end":79954,"line_start":57,"line_end":57,"column_start":5,"column_end":7},"name":"Io","qualname":"::error::ErrorKind::Io","value":"ErrorKind::Io(io::Error)","parent":{"krate":0,"index":1732},"children":[],"decl_id":null,"docs":" An I/O error that occurred while reading CSV data.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":769},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":80067,"byte_end":80071,"line_start":60,"line_end":60,"column_start":5,"column_end":9},"name":"Utf8","qualname":"::error::ErrorKind::Utf8","value":"ErrorKind::Utf8 { pos, err }","parent":{"krate":0,"index":1732},"children":[],"decl_id":null,"docs":" A UTF-8 decoding error that occured while reading CSV data into Rust\n `String`s.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":775},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":80467,"byte_end":80481,"line_start":70,"line_end":70,"column_start":5,"column_end":19},"name":"UnequalLengths","qualname":"::error::ErrorKind::UnequalLengths","value":"ErrorKind::UnequalLengths { pos, expected_len, len }","parent":{"krate":0,"index":1732},"children":[],"decl_id":null,"docs":" This error occurs when two records with an unequal number of fields\n are found. This error only occurs when the `flexible` option in a\n CSV reader/writer is disabled.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":783},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":81099,"byte_end":81103,"line_start":84,"line_end":84,"column_start":5,"column_end":9},"name":"Seek","qualname":"::error::ErrorKind::Seek","value":"ErrorKind::Seek","parent":{"krate":0,"index":1732},"children":[],"decl_id":null,"docs":" This error occurs when either the `byte_headers` or `headers` methods\n are called on a CSV reader that was asked to `seek` before it parsed\n the first record.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":785},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":81184,"byte_end":81193,"line_start":86,"line_end":86,"column_start":5,"column_end":14},"name":"Serialize","qualname":"::error::ErrorKind::Serialize","value":"ErrorKind::Serialize(String)","parent":{"krate":0,"index":1732},"children":[],"decl_id":null,"docs":" An error of this kind occurs only when using the Serde serializer.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":789},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":81311,"byte_end":81322,"line_start":89,"line_end":89,"column_start":5,"column_end":16},"name":"Deserialize","qualname":"::error::ErrorKind::Deserialize","value":"ErrorKind::Deserialize { pos, err }","parent":{"krate":0,"index":1732},"children":[],"decl_id":null,"docs":" An error of this kind occurs only when performing automatic\n deserialization with serde.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":795},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":81765,"byte_end":81780,"line_start":101,"line_end":101,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":1732},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1732},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":79877,"byte_end":79886,"line_start":55,"line_end":55,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error::ErrorKind","value":"ErrorKind::{Io, Utf8, UnequalLengths, Seek, Serialize, Deserialize, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":765},{"krate":0,"index":769},{"krate":0,"index":775},{"krate":0,"index":783},{"krate":0,"index":785},{"krate":0,"index":789},{"krate":0,"index":795}],"decl_id":null,"docs":" The specific type of an error.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1738},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":85415,"byte_end":85428,"line_start":202,"line_end":202,"column_start":12,"column_end":25},"name":"FromUtf8Error","qualname":"::error::FromUtf8Error","value":"FromUtf8Error {  }","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":799}],"decl_id":null,"docs":" A UTF-8 validation error during record conversion.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":85404,"byte_end":85476,"line_start":202,"line_end":205,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":85741,"byte_end":85757,"line_start":214,"line_end":214,"column_start":12,"column_end":28},"name":"into_byte_record","qualname":"<FromUtf8Error>::into_byte_record","value":"fn (self) -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Access the underlying `ByteRecord` that failed UTF-8 validation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":85872,"byte_end":85882,"line_start":219,"line_end":219,"column_start":12,"column_end":22},"name":"utf8_error","qualname":"<FromUtf8Error>::utf8_error","value":"fn (&self) -> &Utf8Error","parent":null,"children":[],"decl_id":null,"docs":" Access the underlying UTF-8 validation error.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1758},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":86522,"byte_end":86531,"line_start":243,"line_end":243,"column_start":12,"column_end":21},"name":"Utf8Error","qualname":"::error::Utf8Error","value":"Utf8Error {  }","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":803}],"decl_id":null,"docs":" A UTF-8 validation error.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":86511,"byte_end":86729,"line_start":243,"line_end":248,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":86995,"byte_end":87000,"line_start":257,"line_end":257,"column_start":12,"column_end":17},"name":"field","qualname":"<Utf8Error>::field","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The field index of a byte record in which UTF-8 validation failed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":87120,"byte_end":87131,"line_start":259,"line_end":259,"column_start":12,"column_end":23},"name":"valid_up_to","qualname":"<Utf8Error>::valid_up_to","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The index into the given field up to which valid UTF-8 was verified.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":628},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":87849,"byte_end":87863,"line_start":283,"line_end":283,"column_start":12,"column_end":26},"name":"IntoInnerError","qualname":"::error::IntoInnerError","value":"IntoInnerError {  }","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":287}],"decl_id":null,"docs":" `IntoInnerError` occurs when consuming a `Writer` fails.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":88352,"byte_end":88357,"line_start":300,"line_end":300,"column_start":12,"column_end":17},"name":"error","qualname":"<IntoInnerError<W>>::error","value":"fn (&self) -> &io::Error","parent":null,"children":[],"decl_id":null,"docs":" Returns the error which caused the call to `into_inner` to fail.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":88591,"byte_end":88601,"line_start":308,"line_end":308,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<IntoInnerError<W>>::into_inner","value":"fn (self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying writer which generated the error.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":652},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,99,111,111,107,98,111,111,107,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cookbook","qualname":"::cookbook","value":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/cookbook.rs","parent":null,"children":[],"decl_id":null,"docs":"A cookbook of examples for CSV reading and writing.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1778},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":97047,"byte_end":97060,"line_start":23,"line_end":23,"column_start":12,"column_end":25},"name":"ReaderBuilder","qualname":"::reader::ReaderBuilder","value":"ReaderBuilder {  }","parent":null,"children":[{"krate":0,"index":805},{"krate":0,"index":807},{"krate":0,"index":809},{"krate":0,"index":811},{"krate":0,"index":813}],"decl_id":null,"docs":" Builds a CSV reader with various configuration knobs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":98755,"byte_end":98758,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<ReaderBuilder>::new","value":"fn () -> ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder for configuring CSV parsing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":99555,"byte_end":99564,"line_start":109,"line_end":109,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ReaderBuilder>::from_path","value":"fn <P> (&self, path: P) -> Result<Reader<File>>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV parser from this configuration that reads data from the\n given file path.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":100550,"byte_end":100561,"line_start":141,"line_end":141,"column_start":12,"column_end":23},"name":"from_reader","qualname":"<ReaderBuilder>::from_reader","value":"fn <R> (&self, rdr: R) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV parser from this configuration that reads data from `rdr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":101556,"byte_end":101565,"line_start":176,"line_end":176,"column_start":12,"column_end":21},"name":"delimiter","qualname":"<ReaderBuilder>::delimiter","value":"fn (&mut self, delimiter: u8) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The field delimiter to use when parsing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":103591,"byte_end":103602,"line_start":233,"line_end":233,"column_start":12,"column_end":23},"name":"has_headers","qualname":"<ReaderBuilder>::has_headers","value":"fn (&mut self, yes: bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to treat the first row as a special header row.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":106555,"byte_end":106563,"line_start":319,"line_end":319,"column_start":12,"column_end":20},"name":"flexible","qualname":"<ReaderBuilder>::flexible","value":"fn (&mut self, yes: bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether the number of fields in records is allowed to change or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":108518,"byte_end":108522,"line_start":372,"line_end":372,"column_start":12,"column_end":16},"name":"trim","qualname":"<ReaderBuilder>::trim","value":"fn (&mut self, trim: Trim) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether fields are trimmed of leading and trailing whitespace or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":109736,"byte_end":109746,"line_start":407,"line_end":407,"column_start":12,"column_end":22},"name":"terminator","qualname":"<ReaderBuilder>::terminator","value":"fn (&mut self, term: Terminator) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The record terminator to use when parsing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":110844,"byte_end":110849,"line_start":446,"line_end":446,"column_start":12,"column_end":17},"name":"quote","qualname":"<ReaderBuilder>::quote","value":"fn (&mut self, quote: u8) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The quote character to use when parsing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":112131,"byte_end":112137,"line_start":487,"line_end":487,"column_start":12,"column_end":18},"name":"escape","qualname":"<ReaderBuilder>::escape","value":"fn (&mut self, escape: Option<u8>) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The escape character to use when parsing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":113317,"byte_end":113329,"line_start":526,"line_end":526,"column_start":12,"column_end":24},"name":"double_quote","qualname":"<ReaderBuilder>::double_quote","value":"fn (&mut self, yes: bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable double quote escapes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":114467,"byte_end":114474,"line_start":565,"line_end":565,"column_start":12,"column_end":19},"name":"quoting","qualname":"<ReaderBuilder>::quoting","value":"fn (&mut self, yes: bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable quoting.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":115665,"byte_end":115672,"line_start":605,"line_end":605,"column_start":12,"column_end":19},"name":"comment","qualname":"<ReaderBuilder>::comment","value":"fn (&mut self, comment: Option<u8>) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The comment character to use when parsing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":116849,"byte_end":116854,"line_start":641,"line_end":641,"column_start":12,"column_end":17},"name":"ascii","qualname":"<ReaderBuilder>::ascii","value":"fn (&mut self) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" A convenience method for specifying a configuration to read ASCII\n delimited text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":117072,"byte_end":117087,"line_start":648,"line_end":648,"column_start":12,"column_end":27},"name":"buffer_capacity","qualname":"<ReaderBuilder>::buffer_capacity","value":"fn (&mut self, capacity: usize) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the capacity (in bytes) of the buffer used in the CSV reader.\n This defaults to a reasonable setting.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":117377,"byte_end":117380,"line_start":658,"line_end":658,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ReaderBuilder>::nfa","value":"fn (&mut self, yes: bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the NFA for parsing CSV.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1784},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":121009,"byte_end":121015,"line_start":740,"line_end":740,"column_start":12,"column_end":18},"name":"Reader","qualname":"::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":817},{"krate":0,"index":819},{"krate":0,"index":821}],"decl_id":null,"docs":" A already configured CSV reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":123621,"byte_end":123630,"line_start":819,"line_end":819,"column_start":12,"column_end":21},"name":"from_path","qualname":"<Reader<Reader<File>>>::from_path","value":"fn <P> (path: P) -> Result<Reader<File>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CSV parser with a default configuration for the given\n file path.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":125233,"byte_end":125244,"line_start":873,"line_end":873,"column_start":12,"column_end":23},"name":"from_reader","qualname":"<Reader<R>>::from_reader","value":"fn (rdr: R) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CSV parser with a default configuration for the given\n reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":132269,"byte_end":132280,"line_start":1067,"line_end":1067,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<Reader<R>>::deserialize","value":"fn <D> (&mut self) -> DeserializeRecordsIter<R, D>","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed iterator over deserialized records.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":134460,"byte_end":134476,"line_start":1131,"line_end":1131,"column_start":12,"column_end":28},"name":"into_deserialize","qualname":"<Reader<R>>::into_deserialize","value":"fn <D> (self) -> DeserializeRecordsIntoIter<R, D>","parent":null,"children":[],"decl_id":null,"docs":" Returns an owned iterator over deserialized records.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":135834,"byte_end":135841,"line_start":1172,"line_end":1172,"column_start":12,"column_end":19},"name":"records","qualname":"<Reader<R>>::records","value":"fn (&mut self) -> StringRecordsIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed iterator over all records as strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":137245,"byte_end":137257,"line_start":1214,"line_end":1214,"column_start":12,"column_end":24},"name":"into_records","qualname":"<Reader<R>>::into_records","value":"fn (self) -> StringRecordsIntoIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Returns an owned iterator over all records as strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":138562,"byte_end":138574,"line_start":1253,"line_end":1253,"column_start":12,"column_end":24},"name":"byte_records","qualname":"<Reader<R>>::byte_records","value":"fn (&mut self) -> ByteRecordsIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed iterator over all records as raw bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":139979,"byte_end":139996,"line_start":1295,"line_end":1295,"column_start":12,"column_end":29},"name":"into_byte_records","qualname":"<Reader<R>>::into_byte_records","value":"fn (self) -> ByteRecordsIntoIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Returns an owned iterator over all records as raw bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":142150,"byte_end":142157,"line_start":1355,"line_end":1355,"column_start":12,"column_end":19},"name":"headers","qualname":"<Reader<R>>::headers","value":"fn (&mut self) -> Result<&StringRecord>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the first row read by this parser.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":144801,"byte_end":144813,"line_start":1426,"line_end":1426,"column_start":12,"column_end":24},"name":"byte_headers","qualname":"<Reader<R>>::byte_headers","value":"fn (&mut self) -> Result<&ByteRecord>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the first row read by this parser as raw bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":146038,"byte_end":146049,"line_start":1464,"line_end":1464,"column_start":12,"column_end":23},"name":"set_headers","qualname":"<Reader<R>>::set_headers","value":"fn (&mut self, headers: StringRecord) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the headers of this CSV parser manually.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":147073,"byte_end":147089,"line_start":1497,"line_end":1497,"column_start":12,"column_end":28},"name":"set_byte_headers","qualname":"<Reader<R>>::set_byte_headers","value":"fn (&mut self, headers: ByteRecord) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the headers of this CSV parser manually as raw bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":149715,"byte_end":149726,"line_start":1570,"line_end":1570,"column_start":12,"column_end":23},"name":"read_record","qualname":"<Reader<R>>::read_record","value":"fn (&mut self, record: &mut StringRecord) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Read a single row into the given record. Returns false when no more\n records could be read.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":151562,"byte_end":151578,"line_start":1620,"line_end":1620,"column_start":12,"column_end":28},"name":"read_byte_record","qualname":"<Reader<R>>::read_byte_record","value":"fn (&mut self, record: &mut ByteRecord) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Read a single row into the given byte record. Returns false when no\n more records could be read.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":156194,"byte_end":156202,"line_start":1751,"line_end":1751,"column_start":12,"column_end":20},"name":"position","qualname":"<Reader<R>>::position","value":"fn (&self) -> &Position","parent":null,"children":[],"decl_id":null,"docs":" Return the current position of this CSV reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":157164,"byte_end":157171,"line_start":1785,"line_end":1785,"column_start":12,"column_end":19},"name":"is_done","qualname":"<Reader<R>>::is_done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this reader has been exhausted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":157356,"byte_end":157367,"line_start":1791,"line_end":1791,"column_start":12,"column_end":23},"name":"has_headers","qualname":"<Reader<R>>::has_headers","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this reader has been configured to\n interpret the first record as a header record.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":157488,"byte_end":157495,"line_start":1796,"line_end":1796,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Reader<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":157618,"byte_end":157625,"line_start":1801,"line_end":1801,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Reader<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":157858,"byte_end":157868,"line_start":1809,"line_end":1809,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwraps this CSV reader, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":160542,"byte_end":160546,"line_start":1879,"line_end":1879,"column_start":12,"column_end":16},"name":"seek","qualname":"<Reader<R>>::seek","value":"fn (&mut self, pos: Position) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Seeks the underlying reader to the position given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":161685,"byte_end":161693,"line_start":1906,"line_end":1906,"column_start":12,"column_end":20},"name":"seek_raw","qualname":"<Reader<R>>::seek_raw","value":"fn (&mut self, seek_from: io::SeekFrom, pos: Position) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" This is like `seek`, but provides direct control over how the seeking\n operation is performed via `io::SeekFrom`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":810},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":163075,"byte_end":163101,"line_start":1949,"line_end":1949,"column_start":12,"column_end":38},"name":"DeserializeRecordsIntoIter","qualname":"::reader::DeserializeRecordsIntoIter","value":"DeserializeRecordsIntoIter {  }","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":323}],"decl_id":null,"docs":" An owned iterator over deserialized records.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":163777,"byte_end":163783,"line_start":1973,"line_end":1973,"column_start":12,"column_end":18},"name":"reader","qualname":"<DeserializeRecordsIntoIter<R, D>>::reader","value":"fn (&self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":163908,"byte_end":163918,"line_start":1978,"line_end":1978,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<DeserializeRecordsIntoIter<R, D>>::reader_mut","value":"fn (&mut self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":164055,"byte_end":164066,"line_start":1983,"line_end":1983,"column_start":12,"column_end":23},"name":"into_reader","qualname":"<DeserializeRecordsIntoIter<R, D>>::into_reader","value":"fn (self) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Drop this iterator and return the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":828},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":164804,"byte_end":164826,"line_start":2008,"line_end":2008,"column_start":12,"column_end":34},"name":"DeserializeRecordsIter","qualname":"::reader::DeserializeRecordsIter","value":"DeserializeRecordsIter {  }","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":345}],"decl_id":null,"docs":" A borrowed iterator over deserialized records.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":165522,"byte_end":165528,"line_start":2032,"line_end":2032,"column_start":12,"column_end":18},"name":"reader","qualname":"<DeserializeRecordsIter>::reader","value":"fn (&self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":165653,"byte_end":165663,"line_start":2037,"line_end":2037,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<DeserializeRecordsIter>::reader_mut","value":"fn (&mut self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":844},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":166170,"byte_end":166191,"line_start":2057,"line_end":2057,"column_start":12,"column_end":33},"name":"StringRecordsIntoIter","qualname":"::reader::StringRecordsIntoIter","value":"StringRecordsIntoIter {  }","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":363}],"decl_id":null,"docs":" An owned iterator over records as strings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":166489,"byte_end":166495,"line_start":2068,"line_end":2068,"column_start":12,"column_end":18},"name":"reader","qualname":"<StringRecordsIntoIter<R>>::reader","value":"fn (&self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":166620,"byte_end":166630,"line_start":2073,"line_end":2073,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<StringRecordsIntoIter<R>>::reader_mut","value":"fn (&mut self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":166767,"byte_end":166778,"line_start":2078,"line_end":2078,"column_start":12,"column_end":23},"name":"into_reader","qualname":"<StringRecordsIntoIter<R>>::into_reader","value":"fn (self) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Drop this iterator and return the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":862},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":167329,"byte_end":167346,"line_start":2099,"line_end":2099,"column_start":12,"column_end":29},"name":"StringRecordsIter","qualname":"::reader::StringRecordsIter","value":"StringRecordsIter {  }","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":375}],"decl_id":null,"docs":" A borrowed iterator over records as strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":167668,"byte_end":167674,"line_start":2110,"line_end":2110,"column_start":12,"column_end":18},"name":"reader","qualname":"<StringRecordsIter>::reader","value":"fn (&self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":167799,"byte_end":167809,"line_start":2115,"line_end":2115,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<StringRecordsIter>::reader_mut","value":"fn (&mut self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":878},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":168284,"byte_end":168303,"line_start":2133,"line_end":2133,"column_start":12,"column_end":31},"name":"ByteRecordsIntoIter","qualname":"::reader::ByteRecordsIntoIter","value":"ByteRecordsIntoIter {  }","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":389}],"decl_id":null,"docs":" An owned iterator over records as raw bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":168591,"byte_end":168597,"line_start":2144,"line_end":2144,"column_start":12,"column_end":18},"name":"reader","qualname":"<ByteRecordsIntoIter<R>>::reader","value":"fn (&self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":168722,"byte_end":168732,"line_start":2149,"line_end":2149,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<ByteRecordsIntoIter<R>>::reader_mut","value":"fn (&mut self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":168869,"byte_end":168880,"line_start":2154,"line_end":2154,"column_start":12,"column_end":23},"name":"into_reader","qualname":"<ByteRecordsIntoIter<R>>::into_reader","value":"fn (self) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Drop this iterator and return the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":896},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":169432,"byte_end":169447,"line_start":2175,"line_end":2175,"column_start":12,"column_end":27},"name":"ByteRecordsIter","qualname":"::reader::ByteRecordsIter","value":"ByteRecordsIter {  }","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":401}],"decl_id":null,"docs":" A borrowed iterator over records as raw bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":169759,"byte_end":169765,"line_start":2186,"line_end":2186,"column_start":12,"column_end":18},"name":"reader","qualname":"<ByteRecordsIter>::reader","value":"fn (&self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":169890,"byte_end":169900,"line_start":2191,"line_end":2191,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<ByteRecordsIter>::reader_mut","value":"fn (&mut self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1802},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":224962,"byte_end":224974,"line_start":73,"line_end":73,"column_start":12,"column_end":24},"name":"StringRecord","qualname":"::string_record::StringRecord","value":"","parent":null,"children":[],"decl_id":null,"docs":" A single CSV record stored as valid UTF-8 bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":226721,"byte_end":226724,"line_start":143,"line_end":143,"column_start":12,"column_end":15},"name":"new","qualname":"<StringRecord>::new","value":"fn () -> StringRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `StringRecord`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":226700,"byte_end":226709,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":227068,"byte_end":227081,"line_start":153,"line_end":153,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<StringRecord>::with_capacity","value":"fn (buffer: usize, fields: usize) -> StringRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `StringRecord` with the given capacity.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":227047,"byte_end":227056,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":228427,"byte_end":228443,"line_start":193,"line_end":193,"column_start":12,"column_end":28},"name":"from_byte_record","qualname":"<StringRecord>::from_byte_record","value":"fn (record: ByteRecord) -> result::Result<StringRecord, FromUtf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `StringRecord` from a `ByteRecord`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":228406,"byte_end":228415,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":229749,"byte_end":229771,"line_start":232,"line_end":232,"column_start":12,"column_end":34},"name":"from_byte_record_lossy","qualname":"<StringRecord>::from_byte_record_lossy","value":"fn (record: ByteRecord) -> StringRecord","parent":null,"children":[],"decl_id":null,"docs":" Lossily create a new `StringRecord` from a `ByteRecord`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":229728,"byte_end":229737,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":233370,"byte_end":233381,"line_start":335,"line_end":335,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<StringRecord>::deserialize","value":"fn <'de, D> (&'de self, headers: Option<&'de StringRecord>) -> Result<D>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize this record.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":233994,"byte_end":233998,"line_start":357,"line_end":357,"column_start":12,"column_end":16},"name":"iter","qualname":"<StringRecord>::iter","value":"fn (&self) -> StringRecordIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all fields in this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":233973,"byte_end":233982,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":234445,"byte_end":234448,"line_start":375,"line_end":375,"column_start":12,"column_end":15},"name":"get","qualname":"<StringRecord>::get","value":"fn (&self, i: usize) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Return the field at index `i`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":234424,"byte_end":234433,"line_start":374,"line_end":374,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":235025,"byte_end":235033,"line_start":394,"line_end":394,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<StringRecord>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this record is empty.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":235004,"byte_end":235013,"line_start":393,"line_end":393,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":235356,"byte_end":235359,"line_start":409,"line_end":409,"column_start":12,"column_end":15},"name":"len","qualname":"<StringRecord>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of fields in this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":235335,"byte_end":235344,"line_start":408,"line_end":408,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":235888,"byte_end":235896,"line_start":430,"line_end":430,"column_start":12,"column_end":20},"name":"truncate","qualname":"<StringRecord>::truncate","value":"fn (&mut self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Truncate this record to `n` fields.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":235867,"byte_end":235876,"line_start":429,"line_end":429,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":236402,"byte_end":236407,"line_start":450,"line_end":450,"column_start":12,"column_end":17},"name":"clear","qualname":"<StringRecord>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear this record so that it has zero fields.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":236381,"byte_end":236390,"line_start":449,"line_end":449,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":236930,"byte_end":236934,"line_start":470,"line_end":470,"column_start":12,"column_end":16},"name":"trim","qualname":"<StringRecord>::trim","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Trim the fields of this record so that leading and trailing whitespace\n is removed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":237615,"byte_end":237625,"line_start":496,"line_end":496,"column_start":12,"column_end":22},"name":"push_field","qualname":"<StringRecord>::push_field","value":"fn (&mut self, field: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a new field to this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":237594,"byte_end":237603,"line_start":495,"line_end":495,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":238978,"byte_end":238986,"line_start":539,"line_end":539,"column_start":12,"column_end":20},"name":"position","qualname":"<StringRecord>::position","value":"fn (&self) -> Option<&Position>","parent":null,"children":[],"decl_id":null,"docs":" Return the position of this record, if available.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":238957,"byte_end":238966,"line_start":538,"line_end":538,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":239516,"byte_end":239528,"line_start":560,"line_end":560,"column_start":12,"column_end":24},"name":"set_position","qualname":"<StringRecord>::set_position","value":"fn (&mut self, pos: Option<Position>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the position of this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":239495,"byte_end":239504,"line_start":559,"line_end":559,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":240257,"byte_end":240262,"line_start":582,"line_end":582,"column_start":12,"column_end":17},"name":"range","qualname":"<StringRecord>::range","value":"fn (&self, i: usize) -> Option<Range<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return the start and end position of a field in this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":240236,"byte_end":240245,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":240771,"byte_end":240779,"line_start":599,"line_end":599,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<StringRecord>::as_slice","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Return the entire row as a single string slice. The slice returned\n stores all fields contiguously. The boundaries of each field can be\n determined via the `range` method.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":240750,"byte_end":240759,"line_start":598,"line_end":598,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":241461,"byte_end":241475,"line_start":619,"line_end":619,"column_start":12,"column_end":26},"name":"as_byte_record","qualname":"<StringRecord>::as_byte_record","value":"fn (&self) -> &ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to this record's raw\n [`ByteRecord`](struct.ByteRecord.html).","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":241440,"byte_end":241449,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":242436,"byte_end":242452,"line_start":651,"line_end":651,"column_start":12,"column_end":28},"name":"into_byte_record","qualname":"<StringRecord>::into_byte_record","value":"fn (self) -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Convert this `StringRecord` into a\n [`ByteRecord`](struct.ByteRecord.html).","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":242415,"byte_end":242424,"line_start":650,"line_end":650,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1430},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":243814,"byte_end":243830,"line_start":708,"line_end":708,"column_start":12,"column_end":28},"name":"StringRecordIter","qualname":"::string_record::StringRecordIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the fields in a string record.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1446},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,116,117,116,111,114,105,97,108,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tutorial","qualname":"::tutorial","value":"/home/fish/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.7/src/tutorial.rs","parent":null,"children":[],"decl_id":null,"docs":"A tutorial for handling CSV data in Rust.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1812},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":334898,"byte_end":334911,"line_start":28,"line_end":28,"column_start":12,"column_end":25},"name":"WriterBuilder","qualname":"::writer::WriterBuilder","value":"WriterBuilder {  }","parent":null,"children":[{"krate":0,"index":851},{"krate":0,"index":853},{"krate":0,"index":855},{"krate":0,"index":857}],"decl_id":null,"docs":" Builds a CSV writer with various configuration knobs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":336037,"byte_end":336040,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<WriterBuilder>::new","value":"fn () -> WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder for configuring CSV writing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":336868,"byte_end":336877,"line_start":98,"line_end":98,"column_start":12,"column_end":21},"name":"from_path","qualname":"<WriterBuilder>::from_path","value":"fn <P> (&self, path: P) -> Result<Writer<File>>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer from this configuration that writes data to the\n given file path. The file is truncated if it already exists.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":337800,"byte_end":337811,"line_start":126,"line_end":126,"column_start":12,"column_end":23},"name":"from_writer","qualname":"<WriterBuilder>::from_writer","value":"fn <W> (&self, wtr: W) -> Writer<W>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer from this configuration that writes data to `wtr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":338616,"byte_end":338625,"line_start":155,"line_end":155,"column_start":12,"column_end":21},"name":"delimiter","qualname":"<WriterBuilder>::delimiter","value":"fn (&mut self, delimiter: u8) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The field delimiter to use when writing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":341726,"byte_end":341737,"line_start":247,"line_end":247,"column_start":12,"column_end":23},"name":"has_headers","qualname":"<WriterBuilder>::has_headers","value":"fn (&mut self, yes: bool) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to write a header row before writing any other row.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1512},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":343755,"byte_end":343763,"line_start":309,"line_end":309,"column_start":12,"column_end":20},"name":"flexible","qualname":"<WriterBuilder>::flexible","value":"fn (&mut self, yes: bool) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether the number of fields in records is allowed to change or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1514},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":344891,"byte_end":344901,"line_start":344,"line_end":344,"column_start":12,"column_end":22},"name":"terminator","qualname":"<WriterBuilder>::terminator","value":"fn (&mut self, term: Terminator) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The record terminator to use when writing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":346995,"byte_end":347006,"line_start":408,"line_end":408,"column_start":12,"column_end":23},"name":"quote_style","qualname":"<WriterBuilder>::quote_style","value":"fn (&mut self, style: QuoteStyle) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The quoting style to use when writing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":347891,"byte_end":347896,"line_start":438,"line_end":438,"column_start":12,"column_end":17},"name":"quote","qualname":"<WriterBuilder>::quote","value":"fn (&mut self, quote: u8) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The quote character to use when writing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":348833,"byte_end":348845,"line_start":469,"line_end":469,"column_start":12,"column_end":24},"name":"double_quote","qualname":"<WriterBuilder>::double_quote","value":"fn (&mut self, yes: bool) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable double quote escapes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":349981,"byte_end":349987,"line_start":504,"line_end":504,"column_start":12,"column_end":18},"name":"escape","qualname":"<WriterBuilder>::escape","value":"fn (&mut self, escape: u8) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The escape character to use when writing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":350233,"byte_end":350248,"line_start":511,"line_end":511,"column_start":12,"column_end":27},"name":"buffer_capacity","qualname":"<WriterBuilder>::buffer_capacity","value":"fn (&mut self, capacity: usize) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the capacity (in bytes) of the internal buffer used in the CSV\n writer. This defaults to a reasonable setting.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1818},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":351619,"byte_end":351625,"line_start":544,"line_end":544,"column_start":12,"column_end":18},"name":"Writer","qualname":"::writer::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":863},{"krate":0,"index":865},{"krate":0,"index":867}],"decl_id":null,"docs":" A already configured CSV writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1532},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":354373,"byte_end":354382,"line_start":629,"line_end":629,"column_start":12,"column_end":21},"name":"from_path","qualname":"<Writer<File>>::from_path","value":"fn <P> (path: P) -> Result<Writer<File>>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer with a default configuration that writes data to the\n given file path. The file is truncated if it already exists.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":356003,"byte_end":356014,"line_start":684,"line_end":684,"column_start":12,"column_end":23},"name":"from_writer","qualname":"<Writer<W>>::from_writer","value":"fn (wtr: W) -> Writer<W>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer with a default configuration that writes data to\n `wtr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1540},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":363759,"byte_end":363768,"line_start":902,"line_end":902,"column_start":12,"column_end":21},"name":"serialize","qualname":"<Writer<W>>::serialize","value":"fn <S> (&mut self, record: S) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a single record using Serde.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":365230,"byte_end":365242,"line_start":945,"line_end":945,"column_start":12,"column_end":24},"name":"write_record","qualname":"<Writer<W>>::write_record","value":"fn <I, T> (&mut self, record: I) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a single record.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":366724,"byte_end":366741,"line_start":987,"line_end":987,"column_start":12,"column_end":29},"name":"write_byte_record","qualname":"<Writer<W>>::write_byte_record","value":"fn (&mut self, record: &ByteRecord) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a single `ByteRecord`.","sig":null,"attributes":[{"value":"inline(never)","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":366696,"byte_end":366712,"line_start":986,"line_end":986,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1546},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":370206,"byte_end":370217,"line_start":1076,"line_end":1076,"column_start":12,"column_end":23},"name":"write_field","qualname":"<Writer<W>>::write_field","value":"fn <T> (&mut self, field: T) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a single field.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1550},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":371385,"byte_end":371390,"line_start":1110,"line_end":1110,"column_start":12,"column_end":17},"name":"flush","qualname":"<Writer<W>>::flush","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Flush the contents of the internal buffer to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1552},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":371788,"byte_end":371798,"line_start":1122,"line_end":1122,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Writer<W>>::into_inner","value":"fn (mut self) -> result::Result<W, IntoInnerError<Writer<W>>>","parent":null,"children":[],"decl_id":null,"docs":" Flush the contents of the internal buffer and return the underlying\n writer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":893},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4951,"byte_end":4957,"line_start":213,"line_end":213,"column_start":5,"column_end":11},"name":"Always","qualname":"::QuoteStyle::Always","value":"QuoteStyle::Always","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":" This puts quotes around every field. Always.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":895},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5292,"byte_end":5301,"line_start":221,"line_end":221,"column_start":5,"column_end":14},"name":"Necessary","qualname":"::QuoteStyle::Necessary","value":"QuoteStyle::Necessary","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":" This puts quotes around fields only when necessary.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":897},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5531,"byte_end":5541,"line_start":225,"line_end":225,"column_start":5,"column_end":15},"name":"NonNumeric","qualname":"::QuoteStyle::NonNumeric","value":"QuoteStyle::NonNumeric","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":" This puts quotes around all fields that are non-numeric. Namely, when\n writing a field that does not parse as a valid float or integer, then\n quotes will be used even if they aren't strictly necessary.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":899},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5626,"byte_end":5631,"line_start":227,"line_end":227,"column_start":5,"column_end":10},"name":"Never","qualname":"::QuoteStyle::Never","value":"QuoteStyle::Never","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":" This *never* writes quotes, even if it would produce invalid CSV data.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":901},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5911,"byte_end":5926,"line_start":234,"line_end":234,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::QuoteStyle::__Nonexhaustive","value":"QuoteStyle::__Nonexhaustive","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1842},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4881,"byte_end":4891,"line_start":211,"line_end":211,"column_start":10,"column_end":20},"name":"QuoteStyle","qualname":"::QuoteStyle","value":"QuoteStyle::{Always, Necessary, NonNumeric, Never, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":897},{"krate":0,"index":899},{"krate":0,"index":901}],"decl_id":null,"docs":" The quoting style to use when writing CSV data.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4872,"byte_end":5929,"line_start":211,"line_end":235,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":903},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6746,"byte_end":6750,"line_start":262,"line_end":262,"column_start":5,"column_end":9},"name":"CRLF","qualname":"::Terminator::CRLF","value":"Terminator::CRLF","parent":{"krate":0,"index":1854},"children":[],"decl_id":null,"docs":" Parses `\\r`, `\\n` or `\\r\\n` as a single record terminator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":905},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6810,"byte_end":6813,"line_start":264,"line_end":264,"column_start":5,"column_end":8},"name":"Any","qualname":"::Terminator::Any","value":"Terminator::Any(u8)","parent":{"krate":0,"index":1854},"children":[],"decl_id":null,"docs":" Parses the byte given as a record terminator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":909},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7097,"byte_end":7112,"line_start":271,"line_end":271,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::Terminator::__Nonexhaustive","value":"Terminator::__Nonexhaustive","parent":{"krate":0,"index":1854},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1854},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6662,"byte_end":6672,"line_start":260,"line_end":260,"column_start":10,"column_end":20},"name":"Terminator","qualname":"::Terminator","value":"Terminator::{CRLF, Any, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":909}],"decl_id":null,"docs":" A record terminator.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6653,"byte_end":7115,"line_start":260,"line_end":272,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":911},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7721,"byte_end":7725,"line_start":295,"line_end":295,"column_start":5,"column_end":9},"name":"None","qualname":"::Trim::None","value":"Trim::None","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":" Preserves fields and headers. This is the default.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":913},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7769,"byte_end":7776,"line_start":297,"line_end":297,"column_start":5,"column_end":12},"name":"Headers","qualname":"::Trim::Headers","value":"Trim::Headers","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":" Trim whitespace from headers.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":915},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7836,"byte_end":7842,"line_start":299,"line_end":299,"column_start":5,"column_end":11},"name":"Fields","qualname":"::Trim::Fields","value":"Trim::Fields","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":" Trim whitespace from fields, but not headers.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":917},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7897,"byte_end":7900,"line_start":301,"line_end":301,"column_start":5,"column_end":8},"name":"All","qualname":"::Trim::All","value":"Trim::All","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":" Trim whitespace from fields and headers.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":919},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8180,"byte_end":8195,"line_start":308,"line_end":308,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::Trim::__Nonexhaustive","value":"Trim::__Nonexhaustive","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1866},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7651,"byte_end":7655,"line_start":293,"line_end":293,"column_start":10,"column_end":14},"name":"Trim","qualname":"::Trim","value":"Trim::{None, Headers, Fields, All, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":911},{"krate":0,"index":913},{"krate":0,"index":915},{"krate":0,"index":917},{"krate":0,"index":919}],"decl_id":null,"docs":" The whitespace preservation behaviour when reading CSV data.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7642,"byte_end":8198,"line_start":293,"line_end":309,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":1598},"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10602,"byte_end":10616,"line_start":385,"line_end":385,"column_start":8,"column_end":22},"name":"invalid_option","qualname":"::invalid_option","value":"fn <'de, D, T> (de: D) -> result::Result<Option<T>, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" A custom Serde deserializer for possibly invalid `Option<T>` fields.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":14567,"byte_end":14577,"line_start":110,"line_end":110,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":14812,"byte_end":14822,"line_start":119,"line_end":119,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":15081,"byte_end":15091,"line_start":131,"line_end":131,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":15321,"byte_end":15331,"line_start":143,"line_end":143,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":16371,"byte_end":16381,"line_start":173,"line_end":173,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":16471,"byte_end":16481,"line_start":180,"line_end":180,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29573,"byte_end":29581,"line_start":620,"line_end":620,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":31203,"byte_end":31209,"line_start":672,"line_end":672,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":31302,"byte_end":31308,"line_start":679,"line_end":679,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33006,"byte_end":33016,"line_start":742,"line_end":742,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33152,"byte_end":33162,"line_start":748,"line_end":748,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33298,"byte_end":33308,"line_start":753,"line_end":753,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33452,"byte_end":33462,"line_start":760,"line_end":760,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33604,"byte_end":33614,"line_start":767,"line_end":767,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33830,"byte_end":33840,"line_start":776,"line_end":776,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":34991,"byte_end":35005,"line_start":818,"line_end":818,"column_start":32,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":35036,"byte_end":35050,"line_start":820,"line_end":820,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":35702,"byte_end":35716,"line_start":848,"line_end":848,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":48625,"byte_end":48637,"line_start":103,"line_end":103,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":49836,"byte_end":49850,"line_start":156,"line_end":156,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":51885,"byte_end":51897,"line_start":232,"line_end":232,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":64050,"byte_end":64066,"line_start":660,"line_end":660,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":64268,"byte_end":64284,"line_start":669,"line_end":669,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":64386,"byte_end":64402,"line_start":675,"line_end":675,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":64659,"byte_end":64679,"line_start":685,"line_end":685,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":65268,"byte_end":65284,"line_start":703,"line_end":703,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":65555,"byte_end":65575,"line_start":715,"line_end":715,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":79285,"byte_end":79290,"line_start":30,"line_end":30,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":81810,"byte_end":81815,"line_start":104,"line_end":104,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":81929,"byte_end":81934,"line_start":110,"line_end":110,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":82053,"byte_end":82058,"line_start":116,"line_end":116,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":83050,"byte_end":83055,"line_start":144,"line_end":144,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":85641,"byte_end":85654,"line_start":212,"line_end":212,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":85955,"byte_end":85968,"line_start":224,"line_end":224,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":86081,"byte_end":86094,"line_start":230,"line_end":230,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":86897,"byte_end":86906,"line_start":255,"line_end":255,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":87190,"byte_end":87199,"line_start":262,"line_end":262,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":87295,"byte_end":87304,"line_start":266,"line_end":266,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":88162,"byte_end":88176,"line_start":296,"line_end":296,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":88679,"byte_end":88693,"line_start":313,"line_end":313,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":88900,"byte_end":88914,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":89035,"byte_end":89049,"line_start":330,"line_end":330,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":97451,"byte_end":97464,"line_start":36,"line_end":36,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":97742,"byte_end":97755,"line_start":48,"line_end":48,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":744},{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":122951,"byte_end":122957,"line_start":795,"line_end":795,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":123754,"byte_end":123760,"line_start":824,"line_end":824,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":157950,"byte_end":157956,"line_start":1814,"line_end":1814,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":802},{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":162053,"byte_end":162064,"line_start":1922,"line_end":1922,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":163257,"byte_end":163283,"line_start":1956,"line_end":1956,"column_start":40,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":164170,"byte_end":164196,"line_start":1989,"line_end":1989,"column_start":18,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":824},{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":165002,"byte_end":165024,"line_start":2015,"line_end":2015,"column_start":44,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":165786,"byte_end":165808,"line_start":2043,"line_end":2043,"column_start":18,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":166261,"byte_end":166282,"line_start":2062,"line_end":2062,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":166857,"byte_end":166878,"line_start":2083,"line_end":2083,"column_start":32,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":858},{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":167436,"byte_end":167453,"line_start":2104,"line_end":2104,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":870}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":167907,"byte_end":167924,"line_start":2120,"line_end":2120,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":168371,"byte_end":168390,"line_start":2138,"line_end":2138,"column_start":19,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":168959,"byte_end":168978,"line_start":2159,"line_end":2159,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":892},{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":169535,"byte_end":169550,"line_start":2180,"line_end":2180,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":169998,"byte_end":170013,"line_start":2196,"line_end":2196,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":908},{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":194854,"byte_end":194859,"line_start":344,"line_end":344,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":199000,"byte_end":199008,"line_start":441,"line_end":441,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":1130},{"krate":0,"index":1134}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":225008,"byte_end":225020,"line_start":75,"line_end":75,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1334}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":225167,"byte_end":225179,"line_start":81,"line_end":81,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1338}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":225472,"byte_end":225484,"line_start":93,"line_end":93,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1346}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":225748,"byte_end":225760,"line_start":105,"line_end":105,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1354}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":225951,"byte_end":225963,"line_start":112,"line_end":112,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1358}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":226057,"byte_end":226069,"line_start":119,"line_end":119,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1362},{"krate":0,"index":1364},{"krate":0,"index":1366},{"krate":0,"index":1368},{"krate":0,"index":1370},{"krate":0,"index":1372},{"krate":0,"index":1374},{"krate":0,"index":1376},{"krate":0,"index":1378},{"krate":0,"index":1380},{"krate":0,"index":1382},{"krate":0,"index":1384},{"krate":0,"index":1386},{"krate":0,"index":1388},{"krate":0,"index":1390},{"krate":0,"index":1392},{"krate":0,"index":1394},{"krate":0,"index":1396},{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":242526,"byte_end":242538,"line_start":656,"line_end":656,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1402},{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":242681,"byte_end":242693,"line_start":662,"line_end":662,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1408}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":242851,"byte_end":242863,"line_start":669,"line_end":669,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1412}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":243008,"byte_end":243020,"line_start":676,"line_end":676,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1416}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":243239,"byte_end":243251,"line_start":685,"line_end":685,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1420}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":243879,"byte_end":243895,"line_start":710,"line_end":710,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1434},{"krate":0,"index":1436},{"krate":0,"index":1438},{"krate":0,"index":1440}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":244360,"byte_end":244376,"line_start":732,"line_end":732,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":335030,"byte_end":335043,"line_start":35,"line_end":35,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1498}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":335276,"byte_end":335289,"line_start":46,"line_end":46,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1502},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1516},{"krate":0,"index":1518},{"krate":0,"index":1520},{"krate":0,"index":1522},{"krate":0,"index":1524}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":353456,"byte_end":353462,"line_start":597,"line_end":597,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1528}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":353607,"byte_end":353613,"line_start":605,"line_end":605,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1532}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":354507,"byte_end":354513,"line_start":634,"line_end":634,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1540},{"krate":0,"index":1542},{"krate":0,"index":1544},{"krate":0,"index":1546},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1560}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":374298,"byte_end":374304,"line_start":1201,"line_end":1201,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1564},{"krate":0,"index":1566},{"krate":0,"index":1568},{"krate":0,"index":1570}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5936,"byte_end":5946,"line_start":237,"line_end":237,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1574}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6354,"byte_end":6364,"line_start":249,"line_end":249,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7122,"byte_end":7132,"line_start":274,"line_end":274,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7456,"byte_end":7466,"line_start":285,"line_end":285,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1586}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8205,"byte_end":8209,"line_start":311,"line_end":311,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1590},{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8437,"byte_end":8441,"line_start":321,"line_end":321,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1596}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4702,"byte_end":4710,"line_start":202,"line_end":202,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":652}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4767,"byte_end":4775,"line_start":206,"line_end":206,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1446}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":14567,"byte_end":14577,"line_start":110,"line_end":110,"column_start":20,"column_end":30},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":1600},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":14812,"byte_end":14822,"line_start":119,"line_end":119,"column_start":44,"column_end":54},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":1600},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":15081,"byte_end":15091,"line_start":131,"line_end":131,"column_start":41,"column_end":51},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":1600},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":15321,"byte_end":15331,"line_start":143,"line_end":143,"column_start":21,"column_end":31},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":1600},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":16371,"byte_end":16381,"line_start":173,"line_end":173,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":1600},"to":{"krate":2,"index":2632}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":16471,"byte_end":16481,"line_start":180,"line_end":180,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":1600},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29573,"byte_end":29581,"line_start":620,"line_end":620,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":1630},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":31203,"byte_end":31209,"line_start":672,"line_end":672,"column_start":18,"column_end":24},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":1650},"to":{"krate":2,"index":2632}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":31302,"byte_end":31308,"line_start":679,"line_end":679,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":1650},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33006,"byte_end":33016,"line_start":742,"line_end":742,"column_start":28,"column_end":38},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":1600},"to":{"krate":2,"index":2056}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33152,"byte_end":33162,"line_start":748,"line_end":748,"column_start":29,"column_end":39},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":1600},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33298,"byte_end":33308,"line_start":753,"line_end":753,"column_start":39,"column_end":49},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":1600},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33452,"byte_end":33462,"line_start":760,"line_end":760,"column_start":44,"column_end":54},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":1600},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33604,"byte_end":33614,"line_start":767,"line_end":767,"column_start":42,"column_end":52},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":1600},"to":{"krate":2,"index":4490}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33830,"byte_end":33840,"line_start":776,"line_end":776,"column_start":36,"column_end":46},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":1600},"to":{"krate":2,"index":4510}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":34991,"byte_end":35005,"line_start":818,"line_end":818,"column_start":32,"column_end":46},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":250},"to":{"krate":2,"index":4476}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":35036,"byte_end":35050,"line_start":820,"line_end":820,"column_start":23,"column_end":37},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":250},"to":{"krate":2,"index":4316}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":35702,"byte_end":35716,"line_start":848,"line_end":848,"column_start":34,"column_end":48},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":250},"to":{"krate":2,"index":4456}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":48625,"byte_end":48637,"line_start":103,"line_end":103,"column_start":44,"column_end":56},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":360},"to":{"krate":0,"index":342}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":49836,"byte_end":49850,"line_start":156,"line_end":156,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":380},"to":{"krate":0,"index":342}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":51885,"byte_end":51897,"line_start":232,"line_end":232,"column_start":27,"column_end":39},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":400},"to":{"krate":0,"index":342}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":64050,"byte_end":64066,"line_start":660,"line_end":660,"column_start":21,"column_end":37},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":1686},"to":{"krate":16,"index":7654}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":64268,"byte_end":64284,"line_start":669,"line_end":669,"column_start":19,"column_end":35},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":1686},"to":{"krate":1,"index":2470}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":64386,"byte_end":64402,"line_start":675,"line_end":675,"column_start":23,"column_end":39},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":1686},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":64659,"byte_end":64679,"line_start":685,"line_end":685,"column_start":23,"column_end":43},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":1706},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":65268,"byte_end":65284,"line_start":703,"line_end":703,"column_start":6,"column_end":22},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":1686},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":65555,"byte_end":65575,"line_start":715,"line_end":715,"column_start":6,"column_end":26},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":1706},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":79285,"byte_end":79290,"line_start":30,"line_end":30,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":1726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":81810,"byte_end":81815,"line_start":104,"line_end":104,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":81929,"byte_end":81934,"line_start":110,"line_end":110,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":1,"index":3884},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":82053,"byte_end":82058,"line_start":116,"line_end":116,"column_start":19,"column_end":24},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":1726},"to":{"krate":1,"index":2470}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":83050,"byte_end":83055,"line_start":144,"line_end":144,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":85641,"byte_end":85654,"line_start":212,"line_end":212,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":1738},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":85955,"byte_end":85968,"line_start":224,"line_end":224,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":1738},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":86081,"byte_end":86094,"line_start":230,"line_end":230,"column_start":19,"column_end":32},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":1738},"to":{"krate":1,"index":2470}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":86897,"byte_end":86906,"line_start":255,"line_end":255,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":1758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":87190,"byte_end":87199,"line_start":262,"line_end":262,"column_start":19,"column_end":28},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":1758},"to":{"krate":1,"index":2470}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":87295,"byte_end":87304,"line_start":266,"line_end":266,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":1758},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":88162,"byte_end":88176,"line_start":296,"line_end":296,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":88679,"byte_end":88693,"line_start":313,"line_end":313,"column_start":39,"column_end":53},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":628},"to":{"krate":1,"index":2470}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":88900,"byte_end":88914,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":628},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":89035,"byte_end":89049,"line_start":330,"line_end":330,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":628},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":97451,"byte_end":97464,"line_start":36,"line_end":36,"column_start":18,"column_end":31},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":1778},"to":{"krate":2,"index":2632}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":97742,"byte_end":97755,"line_start":48,"line_end":48,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":1778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":122951,"byte_end":122957,"line_start":795,"line_end":795,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":1784},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":123754,"byte_end":123760,"line_start":824,"line_end":824,"column_start":19,"column_end":25},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":1784},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":157950,"byte_end":157956,"line_start":1814,"line_end":1814,"column_start":30,"column_end":36},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":1784},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":162053,"byte_end":162064,"line_start":1922,"line_end":1922,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":1790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":163257,"byte_end":163283,"line_start":1956,"line_end":1956,"column_start":40,"column_end":66},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":810},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":164170,"byte_end":164196,"line_start":1989,"line_end":1989,"column_start":18,"column_end":44},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":810},"to":{"krate":2,"index":4316}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":165002,"byte_end":165024,"line_start":2015,"line_end":2015,"column_start":44,"column_end":66},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":828},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":165786,"byte_end":165808,"line_start":2043,"line_end":2043,"column_start":18,"column_end":40},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":828},"to":{"krate":2,"index":4316}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":166261,"byte_end":166282,"line_start":2062,"line_end":2062,"column_start":19,"column_end":40},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":844},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":166857,"byte_end":166878,"line_start":2083,"line_end":2083,"column_start":32,"column_end":53},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":844},"to":{"krate":2,"index":4316}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":167436,"byte_end":167453,"line_start":2104,"line_end":2104,"column_start":23,"column_end":40},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":862},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":167907,"byte_end":167924,"line_start":2120,"line_end":2120,"column_start":36,"column_end":53},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":862},"to":{"krate":2,"index":4316}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":168371,"byte_end":168390,"line_start":2138,"line_end":2138,"column_start":19,"column_end":38},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":878},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":168959,"byte_end":168978,"line_start":2159,"line_end":2159,"column_start":32,"column_end":51},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":878},"to":{"krate":2,"index":4316}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":169535,"byte_end":169550,"line_start":2180,"line_end":2180,"column_start":23,"column_end":38},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":896},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":169998,"byte_end":170013,"line_start":2196,"line_end":2196,"column_start":36,"column_end":51},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":896},"to":{"krate":2,"index":4316}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":194854,"byte_end":194859,"line_start":344,"line_end":344,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":1726},"to":{"krate":16,"index":8026}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":199000,"byte_end":199008,"line_start":441,"line_end":441,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":1120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":225008,"byte_end":225020,"line_start":75,"line_end":75,"column_start":20,"column_end":32},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":1802},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":225167,"byte_end":225179,"line_start":81,"line_end":81,"column_start":44,"column_end":56},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":1802},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":225472,"byte_end":225484,"line_start":93,"line_end":93,"column_start":41,"column_end":53},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":1802},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":225748,"byte_end":225760,"line_start":105,"line_end":105,"column_start":21,"column_end":33},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":1802},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":225951,"byte_end":225963,"line_start":112,"line_end":112,"column_start":18,"column_end":30},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":1802},"to":{"krate":2,"index":2632}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":226057,"byte_end":226069,"line_start":119,"line_end":119,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":1802},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":242526,"byte_end":242538,"line_start":656,"line_end":656,"column_start":28,"column_end":40},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":1802},"to":{"krate":2,"index":2056}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":242681,"byte_end":242693,"line_start":662,"line_end":662,"column_start":38,"column_end":50},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":1802},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":242851,"byte_end":242863,"line_start":669,"line_end":669,"column_start":43,"column_end":55},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":1802},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":243008,"byte_end":243020,"line_start":676,"line_end":676,"column_start":41,"column_end":53},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":1802},"to":{"krate":2,"index":4490}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":243239,"byte_end":243251,"line_start":685,"line_end":685,"column_start":35,"column_end":47},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":1802},"to":{"krate":2,"index":4510}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":243879,"byte_end":243895,"line_start":710,"line_end":710,"column_start":23,"column_end":39},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":1430},"to":{"krate":2,"index":4316}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":244360,"byte_end":244376,"line_start":732,"line_end":732,"column_start":34,"column_end":50},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":1430},"to":{"krate":2,"index":4456}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":335030,"byte_end":335043,"line_start":35,"line_end":35,"column_start":18,"column_end":31},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":1812},"to":{"krate":2,"index":2632}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":335276,"byte_end":335289,"line_start":46,"line_end":46,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":1812},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":353456,"byte_end":353462,"line_start":597,"line_end":597,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":1818},"to":{"krate":2,"index":1978}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":353607,"byte_end":353613,"line_start":605,"line_end":605,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":1818},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":354507,"byte_end":354513,"line_start":634,"line_end":634,"column_start":20,"column_end":26},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":1818},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":374298,"byte_end":374304,"line_start":1201,"line_end":1201,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":1836},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5936,"byte_end":5946,"line_start":237,"line_end":237,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":1842},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6354,"byte_end":6364,"line_start":249,"line_end":249,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":1842},"to":{"krate":2,"index":2632}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7122,"byte_end":7132,"line_start":274,"line_end":274,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":1854},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7456,"byte_end":7466,"line_start":285,"line_end":285,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":0,"index":1854},"to":{"krate":2,"index":2632}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8205,"byte_end":8209,"line_start":311,"line_end":311,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":0,"index":1866},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,115,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8437,"byte_end":8441,"line_start":321,"line_end":321,"column_start":18,"column_end":22},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":0,"index":1866},"to":{"krate":2,"index":2632}}]}